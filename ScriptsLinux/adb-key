#!/bin/bash
set -e
scriptName=$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")

function fn_help () {
    echo "Usage: $scriptName [OPTION]"
    echo ""
    echo "  -k KEY, --key KEY         send a keyevent to a connected device"
    echo "  -i TEXT, --input TEXT     send a text input to a connected device"
    echo "  -K, --keyboard            enter keyboard mode (type keys directly to device)"
    echo "  -ss, --shake              send a shake event to a connected device"
    echo "  --vol+                    increases the volume on the device"
    echo "  --vol-                    decreases the volume on the device"
    echo ""
    echo "  --devices                 list connected devices"
    echo ""
    echo "  -s SERIAL                 use device with given serial"
    echo "  -h, --help                show this help"
    echo ""
    echo "Examples:"
    echo "  $scriptName -k HOME"
    echo "  $scriptName -i \"hello world\""
    echo "  $scriptName -K"
    echo "  $scriptName -ss"
    echo "  $scriptName -s SERIAL -k HOME"
    echo "  $scriptName -s SERIAL -i \"hello world\""
    echo "  $scriptName -s SERIAL -K"
    echo "  $scriptName -s SERIAL -ss"
    echo "  $scriptName -s SERIAL --vol+"
    echo "  $scriptName -s SERIAL --vol-"
    exit 0
}

fn_default () {
    if [ "$1" != "" ]; then echo "$scriptName: invalid option '$2'"; fi
    echo "Try '$scriptName --help' for more information."
    exit 1
}

fn_devices () {
    adb devices -l
    exit 0
}

function fn_shake () {
    if [[ "$1" != "false" ]]; then
        adb -s $1 shell input keyevent 82
        exit 0
    else
        adb shell input keyevent 82
        exit 0
    fi
    exit 1
}

function fn_volumeUp () {
    if [[ "$1" != "false" ]]; then
        adb -s $1 shell input keyevent KEYCODE_VOLUME_UP
        exit 0
    else
        adb shell input keyevent KEYCODE_VOLUME_UP
        exit 0
    fi
    exit 1
}

function fn_volumeDown () {
    if [[ "$1" != "false" ]]; then
        adb -s $1 shell input keyevent KEYCODE_VOLUME_DOWN
        exit 0
    else
        adb shell input keyevent KEYCODE_VOLUME_DOWN
        exit 0
    fi
    exit 1
}

function fn_keyevent () {
    function get_key_event () {
        keyCode=$1
        if [ "$1" == "UP" ]; then keyCode=DPAD_UP; fi
        if [ "$1" == "DOWN" ]; then keyCode=DPAD_DOWN; fi
        if [ "$1" == "LEFT" ]; then keyCode=DPAD_LEFT; fi
        if [ "$1" == "RIGHT" ]; then keyCode=DPAD_RIGHT; fi
        if [ "$1" == "ESC" ]; then keyCode=ESCAPE; fi
        keyCode=${keyCode^^}
    }
    if [[ "$1" != "false" ]]; then
        if [ "$1" == "" ]; then echo "$scriptName: missing KEY operator"; exit 1; fi
        get_key_event $1
        adb -s $1 shell input keyevent KEYCODE_$keyCode
        exit 0
    else
        if [ "$2" == "" ]; then echo "$scriptName: missing KEY operator"; exit 1; fi
        get_key_event $2
        adb shell input keyevent KEYCODE_$keyCode
        exit 0
    fi
    exit 1
}

function fn_input () {
    if [[ "$1" != "false" ]]; then
        if [ "$1" == "" ]; then echo "$scriptName: missing KEY operator"; exit 1; fi
        text=`echo $2 | sed "s/\s/\%s/g"`
        adb -s $1 shell input text "$text"
        echo "Written to device > $2" 
        exit 0
    else
        if [ "$2" == "" ]; then echo "$scriptName: missing KEY operator"; exit 1; fi
        text=`echo $2 | sed "s/\s/\%s/g"`
        adb shell input text "$text"
        echo "Written to device > $2" 
        exit 0
    fi
}

function fn_keyboard() {
    IFS=
    echo "CTRL + C to terminate"
    escape_char=$(printf "\u1b")

    while read -rsn1 key; do
        if [[ $key == $escape_char ]]; then
            read -rsn2 rest
            key+="$rest"
            if [[ "$rest" == "OP" || "$rest" == "OQ" || "$rest" == "OR" || "$rest" == "OS" ]]; then
                :
            else
                read -rsn1 extra
                key+="$extra"
            fi
        fi

        case $key in
            $'\eOP')         key="F1" ;;
            $'\eOQ')         key="F2" ;;
            $'\eOR')         key="F3" ;;
            $'\eOS')         key="F4" ;;
            $'\e[15')        key="F5" ;;
            $'\e[17')        key="F6" ;;
            $'\e[18')        key="F7" ;;
            $'\e[19')        key="F8" ;;
            $'\e[20')        key="F9" ;;
            $'\e[21')        key="F10" ;;
            $'\e[23')        key="F11" ;;
            $'\e[24')        key="F12" ;;
            $'\e')           key="ESCAPE" ;;
            '[A')            key="DPAD_UP" ;;
            '[B')            key="DPAD_DOWN" ;;
            '[D')            key="DPAD_LEFT" ;;
            '[C')            key="DPAD_RIGHT" ;;
            '[3' | $'\177')  key="DEL" ;;
            '')              key="RETURN" ;;
            '	' )          key="TAB" ;;
            ' ')             key="SPACE" ;;
            *) ;; # leave other keys unchanged
        esac
        #echo "\{$key\} \{$escape_char\}"

        # If it's a printable character, send as text (case-sensitive)
        if [[ "$key" =~ ^[[:print:]]$ ]]; then
            if [ $# == 1 ]; then
                adb -s $1 shell input text "$key"
            else
                adb shell input text "$key"
            fi
        else
            # otherwise fall back to keyevent
            if [ $# == 1 ]; then
                adb -s $1 shell input keyevent "KEYCODE_$key"
            else
                adb shell input keyevent "KEYCODE_$key"
            fi
        fi
        sleep 0.005
    done
    exit 0
}

function main () {
    if [[ $# == 0 ]]; then
        echo "$scriptName: requires an argument"
        exit 1
    fi

    if [[ "$*" == *"-h"* ]] || [[ "$*" == *"--help"* ]]; then fn_help; fi

    device=false
    [[ "$1" == "-s" ]] && device=$2
    [[ -z $device ]] && echo "$scriptName: -s requires an argument" && exit 1

    if [[ "$device" == "false" ]]; then
        if [[ "$1" == "-ss" ]] || [[ "$1" == "--shake" ]]; then fn_shake $device $2; fi
        if [[ "$1" == "-k" ]] || [[ "$1" == "--key" ]]; then fn_keyevent $device $2; fi
        if [[ "$1" == "-i" ]] || [[ "$1" == "--input" ]]; then fn_input $device $2; fi
        if [[ "$1" == "-K" ]] || [[ "$1" == "--keyboard" ]]; then fn_keyboard $device $2; fi
        if [[ "$1" == "--vol+" ]]; then fn_volumeUp $device $2; fi
        if [[ "$1" == "--vol-" ]]; then fn_volumeDown $device $2; fi
        if [[ "$1" == "--devices" ]]; then fn_devices; fi
        fn_default $device $1
    else
        if [[ "$3" == "-ss" ]] || [[ "$3" == "--shake" ]]; then fn_shake $device $4; fi
        if [[ "$3" == "-k" ]] || [[ "$3" == "--key" ]]; then fn_keyevent $device $4; fi
        if [[ "$3" == "-i" ]] || [[ "$3" == "--input" ]]; then fn_input $device $4; fi
        if [[ "$3" == "--vol+" ]]; then fn_volumeUp $device $4; fi
        if [[ "$3" == "--vol-" ]]; then fn_volumeDown $device $4; fi
        if [[ "$3" == "-K" ]] || [[ "$3" == "--keyboard" ]]; then fn_keyboard $device $4; fi
        if [[ "$3" == "--devices" ]]; then fn_devices; fi
        fn_default $device $3 
    fi
}

main $*